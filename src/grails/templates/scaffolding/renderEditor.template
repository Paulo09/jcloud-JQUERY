<%  if(property.type == Boolean.class || property.type == boolean.class)
        out << renderBooleanEditor(domainClass,property)	
    else if(Number.class.isAssignableFrom(property.type) || (property.type.isPrimitive() && property.type != boolean.class))
        out << renderNumberEditor(domainClass,property)
    else if(property.type == String.class)
        out << renderStringEditor(domainClass,property)
    else if(property.type == Date.class || property.type == java.sql.Date.class || property.type == java.sql.Time.class)
	    out << renderDateEditor(domainClass,property)
    else if(property.type == Calendar.class)
        out << renderDateEditor(domainClass,property)  
    else if(property.type == URL.class) 
        out << renderStringEditor(domainClass,property)
    else if(property.isEnum())
        out << renderEnumEditor(domainClass,property)
    else if(property.type == TimeZone.class)
        out << renderSelectTypeEditor("timeZone",domainClass,property)
    else if(property.type == Locale.class)
        out << renderSelectTypeEditor("locale",domainClass,property)
    else if(property.type == Currency.class)
        out << renderSelectTypeEditor("currency",domainClass,property)
    else if(property.type==([] as Byte[]).class) //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass,property)
    else if(property.type==([] as byte[]).class) //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass,property)                
    else if(property.manyToOne || property.oneToOne)
        out << renderManyToOne(domainClass,property)
    else if(property.oneToMany || property.manyToMany)
        out << renderOneToMany(domainClass,property)

    private renderEnumEditor(domainClass,property) {
        if(property.isEnum()) {
            return "<g:select  from=\"\${${property.type.name}?.values()}\" value=\"\${${domainClass.propertyName}?.${property.name}}\" name=\"${property.name}\" ${renderNoSelection(property)}></g:select>"
        }
    }

    private renderStringEditor(domainClass, property) {
        if(!cp) {
            return "<input type=\"text\" name=\"${property.name}\" id=\"${property.name}\" value=\"\${fieldValue(bean:${domainClass.propertyName},field:'${property.name}')}\" />"
        }
        else {
            if("textarea" == cp.widget || (cp.maxSize > 250 && !cp.password && !cp.inList)) {
                return "<textarea rows=\"5\" cols=\"40\" name=\"${property.name}\">\${fieldValue(bean:${domainClass.propertyName}, field:'${property.name}')}</textarea>"
            }
			if("telefone" == cp.widget || (cp.maxSize > 250 && !cp.password && !cp.inList)) {
 				def sb = new StringBuffer('<input ')
				cp.password ? sb << 'type="password" ' : sb << 'type="number" '
				if(!cp.editable) sb << 'readonly="readonly" '
				if(cp.maxSize) sb << "maxlength=\"${cp.maxSize}\" "
				sb << "id=\"${property.name}\" name=\"${property.name}\" size=\"50\" value=\"\${fieldValue(bean:${domainClass.propertyName},field:'${property.name}')}\"/>"
				return sb.toString() 
            }
			if("camera" == cp.widget || (cp.maxSize > 250 && !cp.password && !cp.inList)) {
			   def sb = new StringBuffer('<input ')
			   cp.password ? sb << 'type="password" ' : sb << 'type="file" '
			   if(!cp.editable) sb << 'readonly="readonly" '
			   if(cp.maxSize) sb << "maxlength=\"${cp.maxSize}\" "
			   sb << " capture=\"camera\" accept=\"image/*\" id=\"takePictureField\" onclick=\"return confirm('Deseja Usar Câmera?');\" name=\"${property.name}\" value=\"\${fieldValue(bean:${domainClass.propertyName},field:'${property.name}')}\"/><img width=\"315\" height=\"320\" id=\"yourimage\" >"
			   return sb.toString()
            }
			if("email" == cp.widget || (cp.maxSize > 250 && !cp.password && !cp.inList)) {
			   def sb = new StringBuffer('<input ')
			   cp.password ? sb << 'type="password" ' : sb << 'type="email" '
			   if(!cp.editable) sb << 'readonly="readonly" '
			   if(cp.maxSize) sb << "maxlength=\"${cp.maxSize}\" "
			   sb << "id=\"${property.name}\" name=\"${property.name}\" size=\"30\" value=\"\${fieldValue(bean:${domainClass.propertyName},field:'${property.name}')}\"/>"
			   return sb.toString()
            }
			if("assinatura" == cp.widget || (cp.maxSize > 250 && !cp.password && !cp.inList)) {
			   def sb ="<div id='wrapper'></b><div id='canvas'>Não Suporta</div><script>signatureCapture();</script><button align='center' type='button' onclick='signatureClear()'>Limpar Assinatura</button><br/></div>"
			   return sb.toString()
            }
             else {
                if(cp.inList) {
                    def sb = new StringBuffer('<g:select ')
                    sb << "id=\"${property.name}\" name=\"${property.name}\" from=\"\${${domainClass.propertyName}.constraints.${property.name}.inList}\" value=\"\${${domainClass.propertyName}.${property?.name}}\" ${renderNoSelection(property)}>"
                    sb << '</g:select>'
                    return sb.toString()
                }
				
                else {
					def apiTextArea=""
					def apiNumero=""
					def apiCor=""
					def apiTel=""
					def apiCpf=""
					def apiCamera=""
				    property.name.eachMatch("textarea"){condicao->apiTextArea=condicao}
					property.name.eachMatch("number"){condicao->apiNumero=condicao}
					property.name.eachMatch("color"){condicao->apiCor=condicao}
					property.name.eachMatch("phone"){condicao->apiTel=condicao}
					property.name.eachMatch("validacpf"){condicao->apiCpf=condicao}
					property.name.eachMatch("camera"){condicao->apiCamera=condicao}
					if(apiTel)
					{
					def sb = new StringBuffer('<input ')
                    cp.password ? sb << 'type="password" ' : sb << 'type="tel" '
                    if(!cp.editable) sb << 'readonly="readonly" '
                    if(cp.maxSize) sb << "maxlength=\"${cp.maxSize}\" "
                    sb << "id=\"${property.name}\" name=\"${property.name}\" size=\"50\" value=\"\${fieldValue(bean:${domainClass.propertyName},field:'${property.name}')}\"/>"
                    return sb.toString() 	
					}
					if(apiCor)
					{
					def sb = new StringBuffer('<input ')
                    cp.password ? sb << 'type="password" ' : sb << 'type="color" '
                    if(!cp.editable) sb << 'readonly="readonly" '
                    if(cp.maxSize) sb << "maxlength=\"${cp.maxSize}\" "
                    sb << "id=\"${property.name}\" name=\"${property.name}\" size=\"50\" value=\"\${fieldValue(bean:${domainClass.propertyName},field:'${property.name}')}\"/>"
                    return sb.toString() 	
					}
					if(apiNumero)
					{
					def sb = new StringBuffer('<input ')
                    cp.password ? sb << 'type="password" ' : sb << 'type="number" '
                    if(!cp.editable) sb << 'readonly="readonly" '
                    if(cp.maxSize) sb << "maxlength=\"${cp.maxSize}\" "
                    sb << "data-clear-btn-text=\"Limpar ${property.naturalName}\" data-clear-btn=\"true\" id=\"${property.name}\" name=\"${property.name}\" size=\"50\" value=\"\${fieldValue(bean:${domainClass.propertyName},field:'${property.name}')}\"/>"
                    return sb.toString()
					}
					if(apiTextArea)
					{
					def sb = new StringBuffer('<g:textArea ')
                    cp.password ? sb << 'type="password" ' : sb << 'type="text" '
                    if(!cp.editable) sb << 'readonly="readonly" '
                    if(cp.maxSize) sb << "maxlength=\"${cp.maxSize}\" "
                    sb << "data-clear-btn-text=\"Limpar ${property.naturalName}\" data-clear-btn=\"true\" id=\"${property.name}\" name=\"${property.name}\" size=\"50\" value=\"\${fieldValue(bean:${domainClass.propertyName},field:'${property.name}')}\"/>"
                    return sb.toString()
					}
					if(apiCpf)
					{
					def sb = new StringBuffer('<input ')
                    cp.password ? sb << 'type="password" ' : sb << 'type="number" oninput="vCPF(this)" '
                    if(!cp.editable) sb << 'readonly="readonly" '
                    if(cp.maxSize) sb << "maxlength=\"${cp.maxSize}\" "
                    sb << "data-clear-btn-text=\"Limpar ${property.naturalName.replaceAll("Textarea","").replaceAll("Link","").replaceAll("Number","").replaceAll("Color","").replaceAll("Phone","").replaceAll("Validacpf","")}\" data-clear-btn=\"true\" id=\"${property.name}\" name=\"${property.name}\" size=\"11\" value=\"\${fieldValue(bean:${domainClass.propertyName},field:'${property.name}')}\"/>"
                    return sb.toString()
					}
					if(apiCamera)
					{
					def sb = new StringBuffer('<input ')
                    cp.password ? sb << 'type="password" ' : sb << 'type="file" '
                    if(!cp.editable) sb << 'readonly="readonly" '
                    if(cp.maxSize) sb << "maxlength=\"${cp.maxSize}\" "
                    sb << " capture=\"camera\" accept=\"image/*\" id=\"takePictureField\" onclick=\"return confirm('Deseja Usar Câmera?');\" name=\"${property.name}\" value=\"\${fieldValue(bean:${domainClass.propertyName},field:'${property.name}')}\"/><img width=\"315\" height=\"320\" id=\"yourimage\" >"
	                return sb.toString()
					}
					if(!apiTextArea && !apiNumero && !apiCor && !apiTel && !apiCpf && !apiCamera)
					{
                    def sb = new StringBuffer('<input ')
                    cp.password ? sb << 'type="password" ' : sb << 'type="text" '
                    if(!cp.editable) sb << 'readonly="readonly" '
                    if(cp.maxSize) sb << "maxlength=\"${cp.maxSize}\" "
                    sb << "data-clear-btn-text=\"Limpar ${property.naturalName}\" data-clear-btn=\"true\" id=\"${property.name}\" name=\"${property.name}\" size=\"50\" value=\"\${fieldValue(bean:${domainClass.propertyName},field:'${property.name}')}\"/>"
                    return sb.toString()
					}
                }
            }
        }
    }

    private renderByteArrayEditor(domainClass,property) {
        return "<input type=\"file\" id=\"${property.name}\" name=\"${property.name}\" />"
    }

    private renderManyToOne(domainClass,property) {
        if(property.association) {            
            return "<g:select optionKey=\"id\" from=\"\${${property.type.name}.list()}\" name=\"${property.name}.id\" value=\"\${${domainClass.propertyName}?.${property.name}?.id}\" ${renderNoSelection(property)}></g:select>"
        }
    }

    private renderOneToMany(domainClass,property) {
        def sw = new StringWriter()
        def pw = new PrintWriter(sw)
        pw.println()
        pw.println "<ul>"
        pw.println "<g:each var=\"${property.name[0]}\" in=\"\${${domainClass.propertyName}?.${property.name}?}\">"
        pw.println "    <li><g:link controller=\"${property.referencedDomainClass.propertyName}\" action=\"show\" id=\"\${${property.name[0]}.id}\">\${${property.name[0]}?.encodeAsHTML()}</g:link></li>"
        pw.println "</g:each>"
        pw.println "</ul>"
        pw.println "<g:link controller=\"${property.referencedDomainClass.propertyName}\" params=\"['${domainClass.propertyName}.id':${domainClass.propertyName}?.id]\" action=\"create\">Add ${property.referencedDomainClass.shortName}</g:link>"
        return sw.toString()
    }

    private renderNumberEditor(domainClass,property) {
        if(!cp) {
            if(property.type == Byte.class) {
                return "<g:select from=\"\${-128..127}\" name=\"${property.name}\" value=\"\${${domainClass.propertyName}?.${property.name}}\"></g:select>"
            }
            else {
                return "<input type=\"text\" id=\"${property.name}\" name=\"${property.name}\" value=\"\${fieldValue(bean:${domainClass.propertyName},field:'${property.name}')}\" />"
            }
        }
        else {
            if(cp.range) {
                return "<g:select from=\"\${${cp.range.from}..${cp.range.to}}\" id=\"${property.name}\" name=\"${property.name}\" value=\"\${${domainClass.propertyName}?.${property.name}}\" ${renderNoSelection(property)}></g:select>"
            }
            else {
                return "<input type=\"text\" id=\"${property.name}\" name=\"${property.name}\" value=\"\${fieldValue(bean:${domainClass.propertyName},field:'${property.name}')}\" />"
            }
        }
     }

    private renderBooleanEditor(domainClass,property) {
        if(!cp) {
            return "<g:checkBox name=\"${property.name}\" value=\"\${${domainClass.propertyName}?.${property.name}}\"></g:checkBox>"
        }
        else {
            def buf = new StringBuffer('<g:checkBox ')
            if(cp.widget) buf << "widget=\"${cp.widget}\"";

            buf << "name=\"${property.name}\" value=\"\${${domainClass.propertyName}?.${property.name}}\" "
            cp.attributes.each { k,v ->
                buf << "${k}=\"${v}\" "
            }
            buf << '></g:checkBox>'
            return buf.toString()
        }
    }

    private renderDateEditor(domainClass,property) {
        if(!cp) {
            return "<input data-clear-btn-text=\"Limpar Data\"  data-clear-btn=\"true\" name=\"${property.name}\" value=\"\${${domainClass.propertyName}?.${property.name}}\"></input>"
	    }
        else {
            if(!cp.editable) {
                return "\${${domainClass.propertyName}?.${property.name}?.toString()}"
            }
            else {
                def buf = new StringBuffer('<input ')
				if(cp.widget) buf << "widget=\"${cp.widget}\" "
                if(cp.format) buf << "format=\"${cp.format}\" "
                cp.attributes.each { k,v ->
                    buf << "${k}=\"${v}\" "
                }
                buf << "name=\"${property.name}\" data-clear-btn-text=\"Limpar ${property.naturalName}\"  data-clear-btn=\"true\" value=\"\${String.format('%td/%<tm/%<tY',${domainClass.propertyName}?.${property.name})}\" ${renderNoSelection(property)}></input>"
		        return buf.toString()
            }
        }
    }

    private renderSelectTypeEditor(type,domainClass,property) {
        if(!cp) {
            return "<g:${type}Select name=\"${property.name}\" value=\"\${${domainClass.propertyName}?.${property.name}}\"></g:${type}Select>"
        }
        else {
            def buf = new StringBuffer("<g:${type}Select ")
            if(cp.widget) buf << "widget=\"${cp.widget}\" ";
            cp.attributes.each { k,v ->
                buf << "${k}=\"${v}\" "
            }
            buf << "name=\"${property.name}\" value=\"\${${domainClass.propertyName}?.${property.name}}\" ${renderNoSelection(property)}></g:${type}Select>"
            return buf.toString()
        }
    }

    private renderNoSelection(property) {
        if(property.optional) {
            if(property.manyToOne || property.oneToOne) {
                return "noSelection=\"['null':'']\""				
            }
            else {
                return "noSelection=\"['':'']\""
            }
        }
        return ""
    }
%>